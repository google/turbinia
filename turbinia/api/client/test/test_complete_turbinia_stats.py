# coding: utf-8

"""
    Turbinia API Server

    Turbinia is an open-source framework for deploying, managing, and running distributed forensic workloads

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from turbinia_api_lib.models.complete_turbinia_stats import CompleteTurbiniaStats

class TestCompleteTurbiniaStats(unittest.TestCase):
    """CompleteTurbiniaStats unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CompleteTurbiniaStats:
        """Test CompleteTurbiniaStats
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CompleteTurbiniaStats`
        """
        model = CompleteTurbiniaStats()
        if include_optional:
            return CompleteTurbiniaStats(
                all_tasks = turbinia_api_lib.models.all_tasks.All Tasks(),
                failed_tasks = turbinia_api_lib.models.failed_tasks.Failed Tasks(),
                requests = turbinia_api_lib.models.requests.Requests(),
                successful_tasks = turbinia_api_lib.models.successful_tasks.Successful Tasks(),
                tasks_per_type = turbinia_api_lib.models.tasks_per_type.Tasks Per Type(),
                tasks_per_user = turbinia_api_lib.models.tasks_per_user.Tasks Per User(),
                tasks_per_worker = turbinia_api_lib.models.tasks_per_worker.Tasks Per Worker()
            )
        else:
            return CompleteTurbiniaStats(
        )
        """

    def testCompleteTurbiniaStats(self):
        """Test CompleteTurbiniaStats"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
