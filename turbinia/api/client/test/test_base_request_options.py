# coding: utf-8

"""
    Turbinia API Server

    Turbinia is an open-source framework for deploying, managing, and running distributed forensic workloads

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from turbinia_api_lib.models.base_request_options import BaseRequestOptions

class TestBaseRequestOptions(unittest.TestCase):
    """BaseRequestOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BaseRequestOptions:
        """Test BaseRequestOptions
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BaseRequestOptions`
        """
        model = BaseRequestOptions()
        if include_optional:
            return BaseRequestOptions(
                filter_patterns = [
                    ''
                    ],
                group_id = '',
                jobs_allowlist = [
                    ''
                    ],
                jobs_denylist = [
                    ''
                    ],
                reason = '',
                recipe_data = '',
                recipe_name = '',
                request_id = '',
                requester = '',
                sketch_id = 56,
                yara_rules = ''
            )
        else:
            return BaseRequestOptions(
        )
        """

    def testBaseRequestOptions(self):
        """Test BaseRequestOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
