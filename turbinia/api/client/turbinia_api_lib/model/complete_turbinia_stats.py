# coding: utf-8

"""
    Turbinia API Server

    Turbinia is an open-source framework for deploying,managing, and running distributed forensic workloads  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from turbinia_api_lib import schemas  # noqa: F401


class CompleteTurbiniaStats(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Statistics for different groups of tasks.
    """


    class MetaOapg:
        
        class properties:
            all_tasks = schemas.DictSchema
            failed_tasks = schemas.DictSchema
            requests = schemas.DictSchema
            successful_tasks = schemas.DictSchema
            tasks_per_type = schemas.DictSchema
            tasks_per_user = schemas.DictSchema
            tasks_per_worker = schemas.DictSchema
            __annotations__ = {
                "all_tasks": all_tasks,
                "failed_tasks": failed_tasks,
                "requests": requests,
                "successful_tasks": successful_tasks,
                "tasks_per_type": tasks_per_type,
                "tasks_per_user": tasks_per_user,
                "tasks_per_worker": tasks_per_worker,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["all_tasks"]) -> MetaOapg.properties.all_tasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failed_tasks"]) -> MetaOapg.properties.failed_tasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requests"]) -> MetaOapg.properties.requests: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["successful_tasks"]) -> MetaOapg.properties.successful_tasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_type"]) -> MetaOapg.properties.tasks_per_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_user"]) -> MetaOapg.properties.tasks_per_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks_per_worker"]) -> MetaOapg.properties.tasks_per_worker: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["all_tasks", "failed_tasks", "requests", "successful_tasks", "tasks_per_type", "tasks_per_user", "tasks_per_worker", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["all_tasks"]) -> typing.Union[MetaOapg.properties.all_tasks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failed_tasks"]) -> typing.Union[MetaOapg.properties.failed_tasks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requests"]) -> typing.Union[MetaOapg.properties.requests, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["successful_tasks"]) -> typing.Union[MetaOapg.properties.successful_tasks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_type"]) -> typing.Union[MetaOapg.properties.tasks_per_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_user"]) -> typing.Union[MetaOapg.properties.tasks_per_user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks_per_worker"]) -> typing.Union[MetaOapg.properties.tasks_per_worker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["all_tasks", "failed_tasks", "requests", "successful_tasks", "tasks_per_type", "tasks_per_user", "tasks_per_worker", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        all_tasks: typing.Union[MetaOapg.properties.all_tasks, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        failed_tasks: typing.Union[MetaOapg.properties.failed_tasks, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        requests: typing.Union[MetaOapg.properties.requests, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        successful_tasks: typing.Union[MetaOapg.properties.successful_tasks, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        tasks_per_type: typing.Union[MetaOapg.properties.tasks_per_type, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        tasks_per_user: typing.Union[MetaOapg.properties.tasks_per_user, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        tasks_per_worker: typing.Union[MetaOapg.properties.tasks_per_worker, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompleteTurbiniaStats':
        return super().__new__(
            cls,
            *_args,
            all_tasks=all_tasks,
            failed_tasks=failed_tasks,
            requests=requests,
            successful_tasks=successful_tasks,
            tasks_per_type=tasks_per_type,
            tasks_per_user=tasks_per_user,
            tasks_per_worker=tasks_per_worker,
            _configuration=_configuration,
            **kwargs,
        )
