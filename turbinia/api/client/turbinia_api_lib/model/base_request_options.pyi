# coding: utf-8

"""
    Turbinia API Server

    Turbinia is an open-source framework for deploying,managing, and running distributed forensic workloads  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from turbinia_api_lib import schemas  # noqa: F401


class BaseRequestOptions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Base Request Options class to be extended by other option types. 
    """


    class MetaOapg:
        
        class properties:
            
            
            class filter_patterns(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filter_patterns':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            group_id = schemas.StrSchema
            
            
            class jobs_allowlist(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jobs_allowlist':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class jobs_denylist(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jobs_denylist':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            reason = schemas.StrSchema
            recipe_data = schemas.StrSchema
            recipe_name = schemas.StrSchema
            request_id = schemas.StrSchema
            requester = schemas.StrSchema
            sketch_id = schemas.IntSchema
            yara_rules = schemas.StrSchema
            __annotations__ = {
                "filter_patterns": filter_patterns,
                "group_id": group_id,
                "jobs_allowlist": jobs_allowlist,
                "jobs_denylist": jobs_denylist,
                "reason": reason,
                "recipe_data": recipe_data,
                "recipe_name": recipe_name,
                "request_id": request_id,
                "requester": requester,
                "sketch_id": sketch_id,
                "yara_rules": yara_rules,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter_patterns"]) -> MetaOapg.properties.filter_patterns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_id"]) -> MetaOapg.properties.group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs_allowlist"]) -> MetaOapg.properties.jobs_allowlist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobs_denylist"]) -> MetaOapg.properties.jobs_denylist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipe_data"]) -> MetaOapg.properties.recipe_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipe_name"]) -> MetaOapg.properties.recipe_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requester"]) -> MetaOapg.properties.requester: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sketch_id"]) -> MetaOapg.properties.sketch_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yara_rules"]) -> MetaOapg.properties.yara_rules: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["filter_patterns", "group_id", "jobs_allowlist", "jobs_denylist", "reason", "recipe_data", "recipe_name", "request_id", "requester", "sketch_id", "yara_rules", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter_patterns"]) -> typing.Union[MetaOapg.properties.filter_patterns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_id"]) -> typing.Union[MetaOapg.properties.group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs_allowlist"]) -> typing.Union[MetaOapg.properties.jobs_allowlist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobs_denylist"]) -> typing.Union[MetaOapg.properties.jobs_denylist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipe_data"]) -> typing.Union[MetaOapg.properties.recipe_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipe_name"]) -> typing.Union[MetaOapg.properties.recipe_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requester"]) -> typing.Union[MetaOapg.properties.requester, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sketch_id"]) -> typing.Union[MetaOapg.properties.sketch_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yara_rules"]) -> typing.Union[MetaOapg.properties.yara_rules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["filter_patterns", "group_id", "jobs_allowlist", "jobs_denylist", "reason", "recipe_data", "recipe_name", "request_id", "requester", "sketch_id", "yara_rules", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        filter_patterns: typing.Union[MetaOapg.properties.filter_patterns, list, tuple, schemas.Unset] = schemas.unset,
        group_id: typing.Union[MetaOapg.properties.group_id, str, schemas.Unset] = schemas.unset,
        jobs_allowlist: typing.Union[MetaOapg.properties.jobs_allowlist, list, tuple, schemas.Unset] = schemas.unset,
        jobs_denylist: typing.Union[MetaOapg.properties.jobs_denylist, list, tuple, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        recipe_data: typing.Union[MetaOapg.properties.recipe_data, str, schemas.Unset] = schemas.unset,
        recipe_name: typing.Union[MetaOapg.properties.recipe_name, str, schemas.Unset] = schemas.unset,
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        requester: typing.Union[MetaOapg.properties.requester, str, schemas.Unset] = schemas.unset,
        sketch_id: typing.Union[MetaOapg.properties.sketch_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        yara_rules: typing.Union[MetaOapg.properties.yara_rules, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BaseRequestOptions':
        return super().__new__(
            cls,
            *_args,
            filter_patterns=filter_patterns,
            group_id=group_id,
            jobs_allowlist=jobs_allowlist,
            jobs_denylist=jobs_denylist,
            reason=reason,
            recipe_data=recipe_data,
            recipe_name=recipe_name,
            request_id=request_id,
            requester=requester,
            sketch_id=sketch_id,
            yara_rules=yara_rules,
            _configuration=_configuration,
            **kwargs,
        )
