# coding: utf-8

"""
    Turbinia API Server

    Turbinia API server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel

class BaseRequestOptions(BaseModel):
    """
    Base Request Options class to be extended by other option types. 
    """
    filter_patterns: Optional[Any] = None
    group_id: Optional[Any] = None
    jobs_allowlist: Optional[Any] = None
    jobs_denylist: Optional[Any] = None
    reason: Optional[Any] = None
    recipe_data: Optional[Any] = None
    recipe_name: Optional[Any] = None
    request_id: Optional[Any] = None
    requester: Optional[Any] = None
    sketch_id: Optional[Any] = None
    yara_rules: Optional[Any] = None
    __properties = ["filter_patterns", "group_id", "jobs_allowlist", "jobs_denylist", "reason", "recipe_data", "recipe_name", "request_id", "requester", "sketch_id", "yara_rules"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BaseRequestOptions:
        """Create an instance of BaseRequestOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if filter_patterns (nullable) is None
        # and __fields_set__ contains the field
        if self.filter_patterns is None and "filter_patterns" in self.__fields_set__:
            _dict['filter_patterns'] = None

        # set to None if group_id (nullable) is None
        # and __fields_set__ contains the field
        if self.group_id is None and "group_id" in self.__fields_set__:
            _dict['group_id'] = None

        # set to None if jobs_allowlist (nullable) is None
        # and __fields_set__ contains the field
        if self.jobs_allowlist is None and "jobs_allowlist" in self.__fields_set__:
            _dict['jobs_allowlist'] = None

        # set to None if jobs_denylist (nullable) is None
        # and __fields_set__ contains the field
        if self.jobs_denylist is None and "jobs_denylist" in self.__fields_set__:
            _dict['jobs_denylist'] = None

        # set to None if reason (nullable) is None
        # and __fields_set__ contains the field
        if self.reason is None and "reason" in self.__fields_set__:
            _dict['reason'] = None

        # set to None if recipe_data (nullable) is None
        # and __fields_set__ contains the field
        if self.recipe_data is None and "recipe_data" in self.__fields_set__:
            _dict['recipe_data'] = None

        # set to None if recipe_name (nullable) is None
        # and __fields_set__ contains the field
        if self.recipe_name is None and "recipe_name" in self.__fields_set__:
            _dict['recipe_name'] = None

        # set to None if request_id (nullable) is None
        # and __fields_set__ contains the field
        if self.request_id is None and "request_id" in self.__fields_set__:
            _dict['request_id'] = None

        # set to None if requester (nullable) is None
        # and __fields_set__ contains the field
        if self.requester is None and "requester" in self.__fields_set__:
            _dict['requester'] = None

        # set to None if sketch_id (nullable) is None
        # and __fields_set__ contains the field
        if self.sketch_id is None and "sketch_id" in self.__fields_set__:
            _dict['sketch_id'] = None

        # set to None if yara_rules (nullable) is None
        # and __fields_set__ contains the field
        if self.yara_rules is None and "yara_rules" in self.__fields_set__:
            _dict['yara_rules'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BaseRequestOptions:
        """Create an instance of BaseRequestOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BaseRequestOptions.parse_obj(obj)

        _obj = BaseRequestOptions.parse_obj({
            "filter_patterns": obj.get("filter_patterns"),
            "group_id": obj.get("group_id"),
            "jobs_allowlist": obj.get("jobs_allowlist"),
            "jobs_denylist": obj.get("jobs_denylist"),
            "reason": obj.get("reason"),
            "recipe_data": obj.get("recipe_data"),
            "recipe_name": obj.get("recipe_name"),
            "request_id": obj.get("request_id"),
            "requester": obj.get("requester"),
            "sketch_id": obj.get("sketch_id"),
            "yara_rules": obj.get("yara_rules")
        })
        return _obj

