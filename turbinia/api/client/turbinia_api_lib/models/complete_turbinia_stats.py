# coding: utf-8

"""
    Turbinia API Server

    Turbinia API server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class CompleteTurbiniaStats(BaseModel):
    """
    Statistics for different groups of tasks.
    """
    all_tasks: Optional[Any] = Field(...)
    failed_tasks: Optional[Any] = Field(...)
    requests: Optional[Any] = Field(...)
    successful_tasks: Optional[Any] = Field(...)
    tasks_per_type: Optional[Any] = Field(...)
    tasks_per_user: Optional[Any] = Field(...)
    tasks_per_worker: Optional[Any] = Field(...)
    __properties = ["all_tasks", "failed_tasks", "requests", "successful_tasks", "tasks_per_type", "tasks_per_user", "tasks_per_worker"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CompleteTurbiniaStats:
        """Create an instance of CompleteTurbiniaStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if all_tasks (nullable) is None
        # and __fields_set__ contains the field
        if self.all_tasks is None and "all_tasks" in self.__fields_set__:
            _dict['all_tasks'] = None

        # set to None if failed_tasks (nullable) is None
        # and __fields_set__ contains the field
        if self.failed_tasks is None and "failed_tasks" in self.__fields_set__:
            _dict['failed_tasks'] = None

        # set to None if requests (nullable) is None
        # and __fields_set__ contains the field
        if self.requests is None and "requests" in self.__fields_set__:
            _dict['requests'] = None

        # set to None if successful_tasks (nullable) is None
        # and __fields_set__ contains the field
        if self.successful_tasks is None and "successful_tasks" in self.__fields_set__:
            _dict['successful_tasks'] = None

        # set to None if tasks_per_type (nullable) is None
        # and __fields_set__ contains the field
        if self.tasks_per_type is None and "tasks_per_type" in self.__fields_set__:
            _dict['tasks_per_type'] = None

        # set to None if tasks_per_user (nullable) is None
        # and __fields_set__ contains the field
        if self.tasks_per_user is None and "tasks_per_user" in self.__fields_set__:
            _dict['tasks_per_user'] = None

        # set to None if tasks_per_worker (nullable) is None
        # and __fields_set__ contains the field
        if self.tasks_per_worker is None and "tasks_per_worker" in self.__fields_set__:
            _dict['tasks_per_worker'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CompleteTurbiniaStats:
        """Create an instance of CompleteTurbiniaStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CompleteTurbiniaStats.parse_obj(obj)

        _obj = CompleteTurbiniaStats.parse_obj({
            "all_tasks": obj.get("all_tasks"),
            "failed_tasks": obj.get("failed_tasks"),
            "requests": obj.get("requests"),
            "successful_tasks": obj.get("successful_tasks"),
            "tasks_per_type": obj.get("tasks_per_type"),
            "tasks_per_user": obj.get("tasks_per_user"),
            "tasks_per_worker": obj.get("tasks_per_worker")
        })
        return _obj

