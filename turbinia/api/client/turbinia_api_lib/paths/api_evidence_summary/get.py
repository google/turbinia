# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from turbinia_api_lib import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from turbinia_api_lib import schemas  # noqa: F401

from turbinia_api_lib.model.http_validation_error import HTTPValidationError

from . import path

# Query params


class GroupSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "_name": "_NAME",
            "cloud_only": "CLOUD_ONLY",
            "context_dependent": "CONTEXT_DEPENDENT",
            "copyable": "COPYABLE",
            "creation_time": "CREATION_TIME",
            "description": "DESCRIPTION",
            "has_child_evidence": "HAS_CHILD_EVIDENCE",
            "last_update": "LAST_UPDATE",
            "local_path": "LOCAL_PATH",
            "mount_path": "MOUNT_PATH",
            "parent_evidence": "PARENT_EVIDENCE",
            "request_id": "REQUEST_ID",
            "resource_id": "RESOURCE_ID",
            "resource_tracked": "RESOURCE_TRACKED",
            "save_metadata": "SAVE_METADATA",
            "saved_path": "SAVED_PATH",
            "saved_path_type": "SAVED_PATH_TYPE",
            "size": "SIZE",
            "source": "SOURCE",
            "source_path": "SOURCE_PATH",
            "type": "TYPE",
        }
    
    @schemas.classproperty
    def _NAME(cls):
        return cls("_name")
    
    @schemas.classproperty
    def CLOUD_ONLY(cls):
        return cls("cloud_only")
    
    @schemas.classproperty
    def CONTEXT_DEPENDENT(cls):
        return cls("context_dependent")
    
    @schemas.classproperty
    def COPYABLE(cls):
        return cls("copyable")
    
    @schemas.classproperty
    def CREATION_TIME(cls):
        return cls("creation_time")
    
    @schemas.classproperty
    def DESCRIPTION(cls):
        return cls("description")
    
    @schemas.classproperty
    def HAS_CHILD_EVIDENCE(cls):
        return cls("has_child_evidence")
    
    @schemas.classproperty
    def LAST_UPDATE(cls):
        return cls("last_update")
    
    @schemas.classproperty
    def LOCAL_PATH(cls):
        return cls("local_path")
    
    @schemas.classproperty
    def MOUNT_PATH(cls):
        return cls("mount_path")
    
    @schemas.classproperty
    def PARENT_EVIDENCE(cls):
        return cls("parent_evidence")
    
    @schemas.classproperty
    def REQUEST_ID(cls):
        return cls("request_id")
    
    @schemas.classproperty
    def RESOURCE_ID(cls):
        return cls("resource_id")
    
    @schemas.classproperty
    def RESOURCE_TRACKED(cls):
        return cls("resource_tracked")
    
    @schemas.classproperty
    def SAVE_METADATA(cls):
        return cls("save_metadata")
    
    @schemas.classproperty
    def SAVED_PATH(cls):
        return cls("saved_path")
    
    @schemas.classproperty
    def SAVED_PATH_TYPE(cls):
        return cls("saved_path_type")
    
    @schemas.classproperty
    def SIZE(cls):
        return cls("size")
    
    @schemas.classproperty
    def SOURCE(cls):
        return cls("source")
    
    @schemas.classproperty
    def SOURCE_PATH(cls):
        return cls("source_path")
    
    @schemas.classproperty
    def TYPE(cls):
        return cls("type")


class OutputSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "keys": "KEYS",
            "content": "CONTENT",
            "count": "COUNT",
        }
    
    @schemas.classproperty
    def KEYS(cls):
        return cls("keys")
    
    @schemas.classproperty
    def CONTENT(cls):
        return cls("content")
    
    @schemas.classproperty
    def COUNT(cls):
        return cls("count")
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'group': typing.Union[GroupSchema, str, ],
        'output': typing.Union[OutputSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_group = api_client.QueryParameter(
    name="group",
    style=api_client.ParameterStyle.FORM,
    schema=GroupSchema,
    explode=True,
)
request_query_output = api_client.QueryParameter(
    name="output",
    style=api_client.ParameterStyle.FORM,
    schema=OutputSchema,
    explode=True,
)
_auth = [
    'oAuth2',
]
SchemaFor200ResponseBodyApplicationJson = schemas.AnyTypeSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor422ResponseBodyApplicationJson = HTTPValidationError


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor422ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '422': _response_for_422,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _get_evidence_summary_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _get_evidence_summary_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _get_evidence_summary_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _get_evidence_summary_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Get Evidence Summary
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_group,
            request_query_output,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class GetEvidenceSummary(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def get_evidence_summary(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get_evidence_summary(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get_evidence_summary(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get_evidence_summary(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_evidence_summary_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_evidence_summary_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


